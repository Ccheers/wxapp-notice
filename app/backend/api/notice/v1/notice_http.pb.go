// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type NoticeHTTPServer interface {
	CheckSubscribeStatus(context.Context, *CheckSubscribeStatusRequest) (*CheckSubscribeStatusReply, error)
	SubscribeNotice(context.Context, *SubscribeNoticeRequest) (*SubscribeNoticeReply, error)
}

func RegisterNoticeHTTPServer(s *http.Server, srv NoticeHTTPServer) {
	r := s.Route("/")
	r.POST("/notice/v1/sub", _Notice_SubscribeNotice0_HTTP_Handler(srv))
	r.POST("/notice/v1/check", _Notice_CheckSubscribeStatus0_HTTP_Handler(srv))
}

func _Notice_SubscribeNotice0_HTTP_Handler(srv NoticeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubscribeNoticeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.notice.v1.Notice/SubscribeNotice")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubscribeNotice(ctx, req.(*SubscribeNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubscribeNoticeReply)
		return ctx.Result(200, reply)
	}
}

func _Notice_CheckSubscribeStatus0_HTTP_Handler(srv NoticeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckSubscribeStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.notice.v1.Notice/CheckSubscribeStatus")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckSubscribeStatus(ctx, req.(*CheckSubscribeStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckSubscribeStatusReply)
		return ctx.Result(200, reply)
	}
}

type NoticeHTTPClient interface {
	CheckSubscribeStatus(ctx context.Context, req *CheckSubscribeStatusRequest, opts ...http.CallOption) (rsp *CheckSubscribeStatusReply, err error)
	SubscribeNotice(ctx context.Context, req *SubscribeNoticeRequest, opts ...http.CallOption) (rsp *SubscribeNoticeReply, err error)
}

type NoticeHTTPClientImpl struct {
	cc *http.Client
}

func NewNoticeHTTPClient(client *http.Client) NoticeHTTPClient {
	return &NoticeHTTPClientImpl{client}
}

func (c *NoticeHTTPClientImpl) CheckSubscribeStatus(ctx context.Context, in *CheckSubscribeStatusRequest, opts ...http.CallOption) (*CheckSubscribeStatusReply, error) {
	var out CheckSubscribeStatusReply
	pattern := "/notice/v1/check"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.notice.v1.Notice/CheckSubscribeStatus"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NoticeHTTPClientImpl) SubscribeNotice(ctx context.Context, in *SubscribeNoticeRequest, opts ...http.CallOption) (*SubscribeNoticeReply, error) {
	var out SubscribeNoticeReply
	pattern := "/notice/v1/sub"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.notice.v1.Notice/SubscribeNotice"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
